#+TITLE: Emacs Initialization
#+STARTUP: nofold hidestars oddeven indent
#+OPTIONS: toc:nil

* Initial stuff
#+begin_src emacs-lisp
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'load-path "~/.emacs.d/lisp")
(require 'req-package)
#+end_src
* Packages
** Smart Tab
#+begin_src emacs-lisp
(req-package smart-tab
  :init (global-smart-tab-mode t))
#+end_src
** YASnippet
#+begin_src emacs-lisp
(req-package yasnippet
  :init
  (progn
    ;; yasnippet
    (setq yas/trigger-key (kbd "C-c <kp-multiply>"))
    ;;(yas/initialize)

    ;; This is where your snippets will lie.
    (setq yas/root-directory '("~/.emacs.d/snippets"))
    (mapc 'yas/load-directory yas/root-directory)
  ))
#+end_src
** Helm
#+begin_src emacs-lisp
(req-package helm-config
  :bind (("C-c h" . helm-mini)
         ("C-c g" . helm-get-grep)
         ("M-i" . helm-imenu))
  :init
  (progn
    ;; Invoke `helm-git-grep' from isearch.
    (define-key isearch-mode-map (kbd "C-c g") 'helm-git-grep-from-isearch)
    ;; Invoke `helm-git-grep' from other helm.
    (eval-after-load 'helm
      '(define-key helm-map (kbd "C-c g") 'helm-git-grep-from-helm))))

(req-package helm
  :init (helm-mode t))
#+end_src
** Magit
#+begin_src emacs-lisp
(req-package magit
  :bind ("C-x g" . magit-status))
#+end_src
** Evernote
#+begin_src emacs-lisp
(req-package evernote-mode
  :bind (("C-c e c" . evernote-create-note)
         ("C-c e o" . evernote-open-note)
         ("C-c e s" . evernote-search-notes)
         ("C-c e S" . evernote-do-saved-search)
         ("C-c e w" . evernote-write-note)
         ("C-c e p" . evernote-post-region)
         ("C-c e b" . evernote-browser))
  :init
  (progn
    (setq evernote-username "hackerfoo") ; optional: you can use this username as default.
    (setq evernote-enml-formatter-command '("w3m" "-dump" "-I" "UTF8" "-O" "UTF8")) ; option
  ))
#+end_src
** Auto Complete
#+begin_src emacs-lisp
(req-package auto-complete-config
  :init
  (progn
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-1.4.20110207/dict")
    
    (setq-default ac-sources '(ac-source-yasnippet ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
    (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
    (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
    (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
    (add-hook 'css-mode-hook 'ac-css-mode-setup)
    (add-hook 'auto-complete-mode-hook 'ac-common-setup)
    (global-auto-complete-mode t)
    (add-to-list 'ac-modes 'objc-mode)))
(req-package auto-complete)
#+end_src
** Projectile
#+begin_src emacs-lisp
(req-package projectile
  :init (projectile-global-mode))
(req-package helm-projectile
  :require (helm projectile)
  :init
  (progn
    (setq projectile-completion-system 'helm)
    (helm-projectile-on)))
#+end_src
** Others
#+begin_src emacs-lisp
(req-package sr-speedbar
  :bind (("<f12>" . sr-speedbar-toggle)))

(if (executable-find "w3m")
  (req-package xcode-document-viewer))

(req-package ensime)
(req-package gruber-darker-theme)
(when (memq window-system '(mac ns))
  (req-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize)))
#+end_src
* UI options
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src
* Misc key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key [pause] 'toggle-window-dedicated)
(global-set-key [f5] 'recompile)
(global-set-key [f6] 'rgrep)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-x p") 'objc-headline)
#+end_src
* Misc settings
#+begin_src emacs-lisp
(show-paren-mode t)

(setq dired-listing-switches "-lgG")

(add-hook 'c-mode-common-hook
  '(lambda ()
     (setq glasses-face "bold")
     (setq glasses-separator nil)
     (hs-minor-mode t)))

;; handle output from iarbuild
(add-hook 'compilation-mode-hook
  '(lambda ()
     (setq split-width-threshold nil)
     (setq compilation-window-height 12)
     (setq compilation-scroll-output 'first-error)
     (add-to-list 'compilation-error-regexp-alist 'iarbuild)
     (add-to-list 'compilation-error-regexp-alist-alist
       '(iarbuild "^\\(.*\\)(\\([0-9]+\\))" 1 2))))

(add-hook 'hs-minor-mode-hook
  '(lambda ()
     (hs-hide-initial-comment-block)
     (local-set-key (kbd "C-<tab>") 'hs-toggle-hiding)))

(setq hippie-expand-try-functions-list
  '(try-expand-dabbrev
    try-expand-dabbrev-all-buffers
    try-expand-dabbrev-from-kill
    try-complete-file-name-partially
    try-complete-file-name
    try-expand-all-abbrevs
    try-expand-list
    try-expand-line
    try-complete-lisp-symbol-partially
    try-complete-lisp-symbol))

(autoload 'imaxima "imaxima" "Image support for Maxima." t)

(if (executable-find "w3m")
  (setq browse-url-browser-function 'w3m))

(setq-default indent-tabs-mode nil)
(setq c-default-style "linux")
(setq c-basic-offset 2)
#+end_src
* Toggle Dedicated Window
#+begin_src emacs-lisp
;; Toggle window dedication
(defun toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message 
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window 
          (not (window-dedicated-p window))))
      "Window '%s' is dedicated"
      "Window '%s' is normal")
   (current-buffer)))
#+end_src
* Path
#+begin_src emacs-lisp
;; This needs fixed
;; (let ((add-path "/usr/local/sbin:/usr/local/bin:/opt/local/sbin:/opt/local/bin:$HOME/Library/Haskell/bin:"))
;;   (setenv "PATH" (concat (getenv "PATH") add-path))
;;   (setq exec-path (append exec-path `(,add-path)))
;; 
;;   (defun eshell-mode-hook-func ()
;;     (setq eshell-path-env (concat add-path eshell-path-env))
;;     (setenv "PATH" (concat add-path (getenv "PATH")))
;;     (define-key eshell-mode-map (kbd "M-s") 'other-window-or-split))
;;   
;;   (add-hook 'eshell-mode-hook 'eshell-mode-hook-func)
;; )
#+end_src
* TeX
#+begin_src
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)
(set-default 'preview-scale-function 2.0)
#+end_src
* Finally
#+begin_src emacs-lisp
(req-package-finish)
#+end_src
